# This file is part of REANA.
# Copyright (C) 2020 CERN.
#
# REANA is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

name: CI

on: [push, pull_request]

jobs:
  lint-shellcheck:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Runs shell script static analysis
        run: |
          sudo apt-get install shellcheck
          ./run-tests.sh --check-shellscript

  lint-black:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Check Python code formatting
        run: |
          pip install --upgrade pip
          pip install black==19.10b0
          ./run-tests.sh --check-black

  lint-flake8:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Check compliance with pep8, pyflakes and circular complexity
        run: |
          pip install --upgrade pip
          pip install flake8
          ./run-tests.sh --check-flake8

  lint-pydocstyle:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Check compliance with Python docstring conventions
        run: |
          pip install --upgrade pip
          pip install pydocstyle
          ./run-tests.sh --check-pydocstyle

  lint-check-manifest:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Check Python manifest completeness
        run: |
          pip install --upgrade pip
          pip install check-manifest
          ./run-tests.sh --check-manifest

  docs-sphinx:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt install libcurl4-openssl-dev libssl-dev
          sudo apt-get install libgnutls28-dev
          sudo apt-get install libkrb5-dev

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip setuptools py
          pip install -r requirements.txt
          pip install -e .[all]

      - name: Run Sphinx documentation with doctests
        run: ./run-tests.sh --check-sphinx

  python-tests:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install system dependencies
        run: sudo apt-get install libkrb5-dev

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip setuptools py
          pip install twine wheel
          pip install -r requirements.txt
          pip install -e .[all]

      - name: Generate and check OpenAPI specification
        run: ./run-tests.sh --check-openapi-spec

      - name: Run pytest
        run: ./run-tests.sh --check-pytest

      - name: Codecov Coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml

  lint-dockerfile:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check Dockerfile compliance
        run: ./run-tests.sh --check-dockerfile

  docker-build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Docker image
        run: ./run-tests.sh --check-docker-build
