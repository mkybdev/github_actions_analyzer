name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest] # add windows-latest later

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies (Linux)
      run: >-
        sudo apt-get update ;
        sudo apt-get install -y build-essential software-properties-common gcc-10 g++-10 sed python3 tar wget cmake autoconf automake libtool curl make unzip zlib1g-dev libpng-dev vim-common git portaudio19-dev libogg-dev libvorbis-dev libgtest-dev google-mock libglu1-mesa-dev freeglut3-dev mesa-common-dev libcairo2-dev libprotobuf-dev protobuf-compiler mesa-vulkan-drivers vulkan-utils libvulkan1 libvulkan-dev qt5-default libqt5x11extras5-dev qttools5-dev-tools qttools5-dev glslang-dev glslang-tools libglx-mesa0 vulkan-validationlayers ;
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 ;
      if: matrix.os == 'ubuntu-latest'

    - name: Configure CMake (Linux)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      if: matrix.os == 'ubuntu-latest'

    - name: Configure CMake (Windows Visual Studio)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build
      if: matrix.os == 'windows-latest'

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test (Linux)
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      if: matrix.os == 'ubuntu-latest'
